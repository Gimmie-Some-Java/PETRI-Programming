[include mainsail.cfg]

# host MCU service is preinstalled and ready to use with:

[mcu CB1]
serial: /tmp/klipper_host_mcu

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_hurakan-if00

[include macro.cfg]
[include debug.cfg]
[include uw_axes.cfg]
[include petri_control.cfg]
[include stall_detection.cfg]

# Back Elevator motor
[stepper_x]
step_pin: PA14
dir_pin: PA10
enable_pin: !PA13
microsteps: 16
rotation_distance: 8
endstop_pin: ^!PC4
position_endstop: 0
position_min: -10  # Allow movement beyond endstop for stall detection
position_max: 235
homing_speed: 20
homing_positive_dir: false

# Transverse Pusher
[stepper_y]
step_pin: PC8
dir_pin: !PA15
enable_pin: !PC14
microsteps: 16
rotation_distance: 56.5487
endstop_pin: ^!PB0
position_endstop: 0
position_min: -10  # Allow movement beyond endstop for stall detection
position_max: 235
homing_speed: 20
homing_positive_dir: false

# Front Elevator motor
[stepper_z]
step_pin: PD2
dir_pin: !PD4
enable_pin: !PD3
microsteps: 16
rotation_distance: 8
endstop_pin: ^!PC6
position_endstop: 0
position_min: -10  # Allow movement beyond endstop for stall detection
position_max: 200
homing_speed: 20
homing_positive_dir: false

# Interlock Pusher
[manual_stepper stepper_u]
step_pin: PB7
dir_pin: PB6
enable_pin: !PB4
microsteps: 16
rotation_distance: 10
endstop_pin: ^!PA5
homing_retract_dist: 0
velocity: 500  # mm/s (500 mm/min) for U axis (outdated by petri_control.cfg)
accel: 817     # Safe horizontal acceleration from motion analysis (outdated by petri_control.cfg)

# Staging Area Pusher
[manual_stepper stepper_w]
step_pin: PD5
dir_pin: PD6
enable_pin: !PB3
microsteps: 16
rotation_distance: 56.5487
endstop_pin: ^!PA3
velocity: 500  # mm/s (500 mm/min) for W axis (outdated by petri_control.cfg)
accel: 817     # Safe horizontal acceleration from motion analysis (outdated by petri_control.cfg)


[fan]
pin: PA8 #fan0

#[cooling_fan fan1]
#pin: PB15

#[cooling_fan fan2]
#pin: PB14

[printer]
kinematics: cartesian
# Motion limits based on fluid sloshing analysis
# Note: Using higher max_accel to allow proper Z acceleration
max_velocity: 820        # mm/s (49200 mm/min) to support F49000 feedrates
max_accel: 1631         # Allows vertical acceleration up to 1.63 m/s² from PDF
square_corner_velocity: 15.0
# Vertical motion limits (Z) - based on fluid sloshing analysis  
max_z_velocity: 300     # mm/s (18000 mm/min) for vertical moves
max_z_accel: 1631       # 1.63 m/s² max vertical acceleration from PDF

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PB8
diag_pin: ^PC4  # Use same pin as endstop for stall detection
driver_SGTHRS: 255  # Stall detection threshold (0-255, lower = more sensitive)
run_current: 1.2
hold_current: .5
#stealthchop_threshold: 0  # Disable StealthChop for stall detection

[tmc2209 stepper_y]
uart_pin: PC9
diag_pin: ^PB0  # Use same pin as endstop for stall detection
driver_SGTHRS: 255  # Stall detection threshold
run_current: 1.0
hold_current: .2
#stealthchop_threshold: 0  # Disable StealthChop for stall detection

[tmc2209 stepper_z]
uart_pin: PD0
diag_pin: ^PC6  # Use same pin as endstop for stall detection
driver_SGTHRS: 255  # Stall detection threshold
run_current: 1.2
hold_current: .5
#stealthchop_threshold: 0  # Disable StealthChop for stall detection

[tmc2209 manual_stepper stepper_w]
uart_pin: PD1
diag_pin: ^PA3  # Use same pin as endstop for stall detection
driver_SGTHRS: 255  # Stall detection threshold
run_current: 1.0
hold_current: .2
stealthchop_threshold: 0  # Disable StealthChop for stall detection

[tmc2209 manual_stepper stepper_u]
uart_pin: PB5
diag_pin: ^PA5  # Use same pin as endstop for stall detection
driver_SGTHRS: 255  # Stall detection threshold
run_current: 2.0
hold_current: .7
#stealthchop_threshold: 0  # Disable StealthChop for stall detection

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC1, EXP1_3=PC3, EXP1_5=PC0, EXP1_7=PA2, EXP1_9=<GND>,
    EXP1_2=PC2,  EXP1_4=<RST>, EXP1_6=PA0, EXP1_8=PA1, EXP1_10=<5V>

# Button for transverse motion and program triggering
[gcode_button transverse_button]
pin: ^!PA4
press_gcode:
    _TRANSVERSE_BUTTON_HANDLER
#release_gcode:
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.

# Main program moved to petri_control.cfg
# Old macro replaced with modular system

[idle_timeout]
# Sets a very long timeout (1 hour) and disables motor shutdown during idle
# This prevents motors from turning off during M0 pauses in MAIN_PROGRAM
timeout: 3600  # 1 hour in seconds
# Custom gcode to run on timeout - prints a message instead of turning off motors
gcode:
    RESPOND MSG="Idle timeout reached but motors kept enabled for Petri program"
    # Don't turn off motors - comment out the M84 command
    # M84  # Turn off motors after timeout idle time is reached

###############################
## Button for emergency stop
###############################
[respond]
# Enable emergency parser response

# Save variables for persistent storage across reboots
[save_variables]
filename: ~/printer_data/config/variables.cfg

[gcode_button estop_button]
pin: ^PC5
press_gcode:
    { action_emergency_stop( "EMERGENCY STOP" ) }
