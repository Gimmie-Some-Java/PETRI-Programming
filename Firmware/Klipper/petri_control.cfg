# PETRI Dish Handling Control System
# Modular macros with tunable parameters and feedrate override support
# Based on motion control analysis for fluid sloshing prevention

#########################################
# TUNABLE PARAMETERS & SETTINGS
#########################################

[gcode_macro _PETRI_SETTINGS]
description: Storage for all tunable Petri system parameters
# Push positions (adjustable by user)
variable_transverse_push_pos: 116.0      # Y axis push position (mm)
variable_interlock_push_pos: 145.0        # U axis push position (mm)
variable_interlock_approach_pos: 133.0
variable_interlock_prime_offset: 8.
variable_staging_push_pos: 144.0          # W axis push position (mm)
variable_elevator_push_pos_x: 187.0      # X axis elevator position (mm)
variable_elevator_push_pos_z: 186.0       # Z axis elevator position (mm)

# Row loading parameters
variable_dish_height: 14.2               # Height per dish row (mm)
variable_max_rows: 5                    # Maximum rows before interlock
variable_current_row: 0                  # Current row counter
variable_program_state: 0                # Program state: 0=idle, 1=running, 2=waiting_transverse, 3=transverse_complete, 4=error
variable_button_ready: True              # Button interrupt flag
variable_transverse_count: 0             # Count of transverse cycles in current row
variable_sequence_step: 0                # Current step in sequence

# Motion parameters (from motion control PDF analysis)
variable_horizontal_feedrate: 20000      # mm/min for horizontal moves (400 mm/s)
variable_vertical_feedrate: 7500         # mm/min for vertical moves (300 mm/s)
variable_rapid_vertical_feedrate: 7500
variable_rapid_interlock_feedrate: 60000
variable_rapid_feedrate: 20000           # mm/min for rapid retracts (max speed)
variable_staging_feedrate: 10000         # mm/min for staging pushers (500 mm/s)
variable_interlock_feedrate: 5000         # mm/min for staging pushers (500 mm/s)

# Timing parameters
variable_push_dwell_time: 0            # milliseconds to hold at push position
variable_retract_dwell_time: 0         # milliseconds to pause before retract

gcode:
    # This macro stores variables only - no G-code execution

[gcode_macro _LOAD_PETRI_SETTINGS]
description: Load saved settings from persistent storage on startup
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if "petri_transverse_push_pos" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={svv.petri_transverse_push_pos}
        RESPOND MSG="Loaded transverse_push_pos: {svv.petri_transverse_push_pos}"
    {% endif %}
    {% if "petri_interlock_push_pos" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={svv.petri_interlock_push_pos}
        RESPOND MSG="Loaded interlock_push_pos: {svv.petri_interlock_push_pos}"
    {% endif %}
    {% if "petri_staging_push_pos" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={svv.petri_staging_push_pos}
        RESPOND MSG="Loaded staging_push_pos: {svv.petri_staging_push_pos}"
    {% endif %}
    {% if "petri_elevator_push_pos_x" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_x VALUE={svv.petri_elevator_push_pos_x}
        RESPOND MSG="Loaded elevator_push_pos_x: {svv.petri_elevator_push_pos_x}"
    {% endif %}
    {% if "petri_elevator_push_pos_z" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_z VALUE={svv.petri_elevator_push_pos_z}
        RESPOND MSG="Loaded elevator_push_pos_z: {svv.petri_elevator_push_pos_z}"
    {% endif %}
    {% if "petri_dish_height" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={svv.petri_dish_height}
        RESPOND MSG="Loaded dish_height: {svv.petri_dish_height}"
    {% endif %}
    {% if "petri_max_rows" in svv %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=max_rows VALUE={svv.petri_max_rows}
        RESPOND MSG="Loaded max_rows: {svv.petri_max_rows}"
    {% endif %}
    RESPOND MSG="Petri settings loaded from persistent storage"

[delayed_gcode _AUTOLOAD_PETRI_SETTINGS]
initial_duration: 2.0
gcode:
    _LOAD_PETRI_SETTINGS

#########################################
# MOTION CONTROL UTILITIES
#########################################

[gcode_macro _APPLY_FEEDRATE_OVERRIDE]
description: Apply feedrate override to calculated speed
gcode:
    {% set base_rate = params.BASE_RATE|default(600)|float %}
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = base_rate * override %}
    RESPOND MSG="Feedrate: {base_rate} mm/min x {override|round(2)} override = {final_rate|round(0)} mm/min"
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=calculated_feedrate VALUE={final_rate}

[gcode_macro _SYNC_XZ_MOVE]
description: Move X and Z axes synchronously (always together)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set x_pos = params.X|default(0)|float %}
    {% set z_pos = params.Z|default(0)|float %}
    {% set feedrate = params.F|default(settings.vertical_feedrate)|float %}
    
    # Apply feedrate override
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    RESPOND MSG="Synchronized XZ move: X{x_pos} Z{z_pos} F{final_rate|round(0)}"
    G1 X{x_pos} Z{z_pos} F{final_rate}

[gcode_macro ALIGN_PLATE]
description: Aligns the interlocking plate on the elevator
gcode:
    G1 Z4. F7500.
    G1 X10. F12000.

#########################################
# PUSH OPERATION MACROS
#########################################

[gcode_macro PUSH_TRANSVERSE]
description: Transverse pusher push operation (Y axis)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set push_pos = params.POSITION|default(settings.transverse_push_pos)|float %}
    {% set feedrate = params.FEEDRATE|default(settings.horizontal_feedrate)|float %}
    
    # Apply feedrate override
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    # Set safe horizontal acceleration before move
    SET_VELOCITY_LIMIT ACCEL=500  # Safe horizontal acceleration from PDF
    RESPOND MSG="Transverse push: Moving to Y{push_pos} at F{final_rate|round(0)}"
    G1 Y15. F30000.
    G4 P10.
    G1 Y{push_pos} F{final_rate}
    #G4 P{settings.push_dwell_time}
    # Reset to default acceleration
    SET_VELOCITY_LIMIT ACCEL=1631

[gcode_macro PUSH_INTERLOCK]
description: Interlock pusher push operation (U axis)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set push_pos = params.POSITION|default(settings.interlock_push_pos)|float %}
    {% set feedrate = params.FEEDRATE|default(settings.interlock_feedrate)|float %}
    {% set approach = params.FEEDRATE|default(settings.interlock_approach_pos)|float %}
    {% set prime_offset = params.FEEDRATE|default(settings.interlock_prime_offset)|float %}
    
    # Apply feedrate override  
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    RESPOND MSG="Interlock push: Moving U to {push_pos} at F{final_rate|round(0)}"
    G1 U{approach} F{final_rate}
    SET_VELOCITY_LIMIT ACCEL=100
    G1 U{push_pos} F2000.
    SET_VELOCITY_LIMIT ACCEL=1631
    G1 U{push_pos - prime_offset} F{final_rate}
    G4 P{settings.push_dwell_time}

[gcode_macro PUSH_STAGING]  
description: Staging pusher push operation (W axis)
gcode:
    SET_VELOCITY_LIMIT ACCEL=200
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set push_pos = params.POSITION|default(settings.staging_push_pos)|float %}
    {% set feedrate = params.FEEDRATE|default(settings.staging_feedrate)|float %}
    
    # Apply feedrate override  
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    RESPOND MSG="Staging push: Moving W to {push_pos} at F{final_rate|round(0)}"
    G1 W35. F20000.
    G4 P10.
    G1 W{push_pos - 5} F{final_rate}
    G1 W{push_pos} F5000.
    
    G4 P{settings.push_dwell_time}

    SET_VELOCITY_LIMIT ACCEL=1631

[gcode_macro PUSH_ELEVATOR]
description: Elevator push operation (synchronized X+Z axes)  
gcode:

    #ALIGN_PLATE
    
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set push_pos_x = params.X|default(settings.elevator_push_pos_x)|float %}
    {% set push_pos_z = params.Z|default(settings.elevator_push_pos_z)|float %}
    {% set feedrate = params.FEEDRATE|default(settings.vertical_feedrate)|float %}
    {% set buzz_feedrate = params.FEEDRATE|default(settings.vertical_feedrate)|float %}
    
    RESPOND MSG="Elevator push: Synchronized XZ movement"
    _SYNC_XZ_MOVE X={push_pos_x} Z={push_pos_z} F={feedrate}
    

#########################################
# RETRACT OPERATION MACROS  
#########################################

[gcode_macro RETRACT_TRANSVERSE]
description: Transverse pusher rapid retract to home (Y axis)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set feedrate = params.FEEDRATE|default(settings.rapid_feedrate)|float %}
    
    # Apply feedrate override
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    # Set safe horizontal acceleration for retract
    SET_VELOCITY_LIMIT ACCEL=1631  # Safe horizontal acceleration
    RESPOND MSG="Transverse retract: Rapid return to Y0 at F{final_rate|round(0)}"
    G4 P{settings.retract_dwell_time}
    G1 Y0 F{final_rate}
    # Reset to default acceleration
    SET_VELOCITY_LIMIT ACCEL=1631

[gcode_macro RETRACT_INTERLOCK]
description: Interlock pusher rapid retract to home (U axis)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set feedrate = params.FEEDRATE|default(settings.rapid_interlock_feedrate)|float %}
    
    # Apply feedrate override
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    RESPOND MSG="Interlock retract: Rapid return to U0 at F{final_rate|round(0)}"
    SET_VELOCITY_LIMIT ACCEL=10000
    G4 P{settings.retract_dwell_time}
    G1 U0 F{final_rate}
    SET_VELOCITY_LIMIT ACCEL=1631

[gcode_macro RETRACT_STAGING]
description: Staging pusher rapid retract to home (W axis)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set feedrate = params.FEEDRATE|default(settings.rapid_feedrate)|float %}
    
    # Apply feedrate override
    {% set override = printer.gcode_move.speed_factor %}
    {% set final_rate = feedrate * override %}
    
    RESPOND MSG="Staging retract: Rapid return to W0 at F{final_rate|round(0)}"
    G4 P{settings.retract_dwell_time}
    G1 W0 F{final_rate}

[gcode_macro RETRACT_ELEVATOR]
description: Elevator rapid retract to home (synchronized X+Z)
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set feedrate = params.FEEDRATE|default(settings.rapid_vertical_feedrate)|float %}
    
    RESPOND MSG="Elevator retract: Rapid synchronized return to home"
    G4 P{settings.retract_dwell_time}
    _SYNC_XZ_MOVE X=4 Z=4 F={feedrate}

#########################################
# COMBINED PUSH + RETRACT MACROS
#########################################

[gcode_macro CYCLE_TRANSVERSE]
description: Complete transverse push and retract cycle
gcode:
    {% set position = params.POSITION|default(0)|float %}
    {% set push_feed = params.PUSH_FEEDRATE|default(0)|float %}
    {% set retract_feed = params.RETRACT_FEEDRATE|default(0)|float %}
    
    RESPOND MSG="Starting transverse push/retract cycle"
    {% if position > 0 %}
        PUSH_TRANSVERSE POSITION={position} {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% else %}
        PUSH_TRANSVERSE {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% endif %}
    
    {% if retract_feed > 0 %}
        RETRACT_TRANSVERSE FEEDRATE={retract_feed}
    {% else %}
        RETRACT_TRANSVERSE
    {% endif %}

[gcode_macro CYCLE_INTERLOCK]
description: Complete interlock push and retract cycle
gcode:
    {% set position = params.POSITION|default(0)|float %}
    {% set push_feed = params.PUSH_FEEDRATE|default(0)|float %}
    {% set retract_feed = params.RETRACT_FEEDRATE|default(0)|float %}
    
    RESPOND MSG="Starting interlock push/retract cycle"
    {% if position > 0 %}
        PUSH_INTERLOCK POSITION={position} {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% else %}
        PUSH_INTERLOCK {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% endif %}
    
    {% if retract_feed > 0 %}
        RETRACT_INTERLOCK FEEDRATE={retract_feed}
    {% else %}
        RETRACT_INTERLOCK
    {% endif %}

[gcode_macro CYCLE_STAGING]
description: Complete staging push and retract cycle
gcode:
    {% set position = params.POSITION|default(0)|float %}
    {% set push_feed = params.PUSH_FEEDRATE|default(0)|float %}
    {% set retract_feed = params.RETRACT_FEEDRATE|default(0)|float %}
    
    RESPOND MSG="Starting staging push/retract cycle"
    {% if position > 0 %}
        PUSH_STAGING POSITION={position} {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% else %}
        PUSH_STAGING {% if push_feed > 0 %}FEEDRATE={push_feed}{% endif %}
    {% endif %}
    
    {% if retract_feed > 0 %}
        RETRACT_STAGING FEEDRATE={retract_feed}
    {% else %}
        RETRACT_STAGING
    {% endif %}

#########################################
# MAIN PROGRAM
#########################################

[gcode_macro MAIN_PROGRAM]
description: Main Petri dish handling sequence with button-driven transverse control
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    RESPOND MSG="=== PETRI DISH HANDLING MAIN PROGRAM STARTING ==="
    
    # Initialize program state
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=current_row VALUE=0
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=1
    
    # Home all axes before starting
    RESPOND MSG="Homing all axes..."
    HOME_ALL
    
    # Move elevator to loading position
    RESPOND MSG="Moving elevator to loading position..."
    PUSH_ELEVATOR
    
    # Start the main operation loop
    START_ROW_LOADING_SEQUENCE

[gcode_macro RESTART_PROGRAM]
description: Restarts the main program and prepares each axis
gcode:
    RETRACT_TRANSVERSE
    RETRACT_STAGING
    RETRACT_INTERLOCK
    PUSH_ELEVATOR

    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=current_row VALUE=0
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=1

    START_ROW_LOADING_SEQUENCE
    
    RESPOND MSG="Program reset"

#########################################
# BUTTON-DRIVEN TRANSVERSE CONTROL
#########################################

[gcode_macro _TRANSVERSE_BUTTON_HANDLER]
description: Handle transverse button press during program
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    # Check if we're in a state where button should respond
    {% if settings.program_state == 2 and settings.button_ready %}
        RESPOND MSG="Transverse button pressed - executing cycle"
        
        # Mark button as not ready to prevent double-presses
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=button_ready VALUE=False
        
        # Execute transverse cycle immediately
        CYCLE_TRANSVERSE
        
        # Update transverse count
        {% set new_count = settings.transverse_count + 1 %}
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_count VALUE={new_count}
        
        # Continue sequence based on count
        CONTINUE_SEQUENCE
        
    {% elif settings.program_state == 0 %}
        # If program not running, just do a manual transverse cycle
        RESPOND MSG="Manual transverse cycle (program not running)"
        CYCLE_TRANSVERSE
        
    {% else %}
        RESPOND MSG="Button press ignored - not waiting for transverse (state: {settings.program_state})"
    {% endif %}

[gcode_macro TEST_TRANSVERSE_BUTTON]
description: Test transverse button functionality
gcode:
    RESPOND MSG="Testing transverse button - press the button now..."
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=button_ready VALUE=True
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=2
    
    # Wait for button press
    G4 P10000  # Wait 10 seconds
    
    {% if printer["gcode_macro _PETRI_SETTINGS"].program_state == 3 %}
        RESPOND MSG="Button test PASSED - button triggered successfully!"
    {% else %}
        RESPOND MSG="Button test FAILED - button did not trigger"
    {% endif %}
    
    # Reset state
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=0
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=button_ready VALUE=True

[gcode_macro CONTINUE_TRANSVERSE]
description: Manual command to continue when waiting for transverse button
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    {% if settings.program_state == 2 %}
        RESPOND MSG="Manual continue - executing transverse cycle"
        CYCLE_TRANSVERSE
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=3
        RESPOND MSG="Transverse cycle complete - program will continue"
    {% else %}
    RESPOND MSG"Not currently waiting for transverse cycle (state: {settings.program_state})"
    {% endif %}

[gcode_macro START_ROW_LOADING_SEQUENCE]
description: Start the row loading sequence
gcode:
    RESPOND MSG="=== STARTING ROW LOADING SEQUENCE ==="
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_count VALUE=0
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=sequence_step VALUE=1
    WAIT_FOR_TRANSVERSE_BUTTON

[gcode_macro WAIT_FOR_TRANSVERSE_BUTTON]
description: Wait for transverse button press
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    # Set state to wait for transverse BEFORE showing messages
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=2
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=button_ready VALUE=True
    
    RESPOND MSG="=== ROW {settings.current_row + 1} - TRANSVERSE CYCLE {settings.transverse_count + 1} of 4 ==="
    RESPOND MSG="Press transverse button to continue..."
    RESPOND MSG="Button is now ready - state set to 2"
    
    # Pause and wait for button - button handler will continue the sequence
    M0

[gcode_macro CONTINUE_SEQUENCE]
description: Continue the sequence based on current state
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    {% if settings.transverse_count < 4 %}
        # Need more transverse cycles
        RESPOND MSG="Transverse cycle {settings.transverse_count} complete - need {4 - settings.transverse_count} more"
        WAIT_FOR_TRANSVERSE_BUTTON
        
    {% else %}
        # All 4 transverse cycles done, proceed to staging
        RESPOND MSG="All 4 transverse cycles complete - proceeding to staging"
        EXECUTE_STAGING_AND_ELEVATOR
    {% endif %}

[gcode_macro EXECUTE_STAGING_AND_ELEVATOR]
description: Execute staging cycle and elevator movement
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    # Run staging cycle
    RESPOND MSG="Running staging cycle..."
    CYCLE_STAGING
    
    # Update row counter
    {% set new_row = settings.current_row + 1 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=current_row VALUE={new_row}
    
    # Lower elevator by dish height
    {% set drop_distance = new_row * settings.dish_height %}
    RESPOND MSG="Lowering elevator to position for row {new_row} (Z drop: {drop_distance}mm)"
    
    _SYNC_XZ_MOVE X={settings.elevator_push_pos_x - drop_distance} Z={settings.elevator_push_pos_z - drop_distance} F={settings.vertical_feedrate}
    
    # Check if we need more rows or proceed to interlock
    CHECK_ROW_COMPLETION

[gcode_macro CHECK_ROW_COMPLETION]
description: Check if all rows are complete or continue loading
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    {% if settings.current_row >= settings.max_rows %}
        # All rows complete - proceed to interlock sequence
        RESPOND MSG="All {settings.max_rows} rows loaded - proceeding to interlock sequence"
        EXECUTE_INTERLOCK_SEQUENCE
        
    {% else %}
        # Need more rows - reset for next row
        RESPOND MSG="Row {settings.current_row} complete - starting next row"
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_count VALUE=0
        WAIT_FOR_TRANSVERSE_BUTTON
    {% endif %}

[gcode_macro EXECUTE_INTERLOCK_SEQUENCE]
description: Execute interlock sequence and restart
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    # Retract elevator
    RESPOND MSG="Retracting elevator..."
    RETRACT_ELEVATOR
    
    # Push interlock pusher
    RESPOND MSG="Pushing interlock..."
    PUSH_INTERLOCK
    
    # Return elevator to loading position for next batch
    RESPOND MSG="Returning elevator to loading position..."
    PUSH_ELEVATOR

    # Retract interlock
    RESPOND MSG="Retracting interlock..."
    RETRACT_INTERLOCK
    
    # Reset for next batch
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=current_row VALUE=0
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_count VALUE=0
    
    RESPOND MSG="=== BATCH COMPLETE - STARTING NEXT BATCH ==="
    START_ROW_LOADING_SEQUENCE

[gcode_macro WAIT_FOR_BUTTON_CYCLES]
description: Wait for specified number of button-triggered transverse cycles
gcode:
    {% set cycles = params.CYCLES|default(4)|int %}
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    RESPOND MSG="Waiting for {cycles} transverse button cycles..."
    
    {% for i in range(cycles) %}
        RESPOND MSG="Waiting for transverse cycle {i+1} of {cycles}"
        
        # Enable button and wait for cycle
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=button_ready VALUE=True
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=2
        
        # Wait for button press with manual continuation option
        RESPOND MSG="Press transverse button to continue (cycle {i+1} of {cycles})..."
        RESPOND MSG="Or use 'CONTINUE_TRANSVERSE' command to proceed manually"
        
        # Set up button waiting state
        SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=program_state VALUE=2
        
        # Simple approach - wait indefinitely for button or manual command
        # Use M0 to pause and wait for user action
        M0 "Press transverse button or click Continue"
        
        {% if printer["gcode_macro _PETRI_SETTINGS"].program_state == 4 %}
            RESPOND MSG="Stopping due to timeout error"
        {% endif %}
    {% endfor %}
    
    RESPOND MSG="Transverse cycles complete"

#########################################
# ROW LOADING MACRO
#########################################

[gcode_macro LOAD_ROW]
description: Load one row - 4x transverse cycles + staging cycle + elevator drop
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    
    RESPOND MSG="=== LOADING ROW {settings.current_row + 1} ==="
    
    # Wait for 4 transverse button cycles
    WAIT_FOR_BUTTON_CYCLES CYCLES=4
    
    # Check if timeout occurred
    {% if printer["gcode_macro _PETRI_SETTINGS"].program_state == 4 %}
        RESPOND MSG="ERROR: Row loading failed due to timeout"
        M112  # Emergency stop
    {% endif %}
    
    # Run staging cycle
    RESPOND MSG="Running staging cycle..."
    CYCLE_STAGING
    
    # Drop elevator by dish height
    {% set new_row = settings.current_row + 1 %}
    {% set drop_distance = new_row * settings.dish_height %}
    RESPOND MSG="Lowering elevator to position for row {new_row} (Z-{drop_distance})"
    
    _SYNC_XZ_MOVE X={settings.elevator_push_pos_x - drop_distance} Z={settings.elevator_push_pos_z - drop_distance} F={settings.vertical_feedrate}
    
    # Update row counter
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=current_row VALUE={new_row}
    
    RESPOND MSG="Row {new_row} loaded successfully"

#########################################
# PARAMETER ADJUSTMENT MACROS
#########################################

[gcode_macro SET_TRANSVERSE_POSITION]
description: Set transverse push position
gcode:
    {% set pos = params.POSITION|float %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={pos}
    RESPOND MSG="Transverse push position set to {pos} mm"

[gcode_macro SET_INTERLOCK_POSITION]  
description: Set interlock push position
gcode:
    {% set pos = params.POSITION|float %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={pos}
    RESPOND MSG="Interlock push position set to {pos} mm"

[gcode_macro SET_STAGING_POSITION]
description: Set staging push position
gcode:
    {% set pos = params.POSITION|float %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={pos}
    RESPOND MSG="Staging push position set to {pos} mm"

[gcode_macro SAVE_PETRI_CONFIG]
description: Save current Petri settings to persistent storage
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    SAVE_VARIABLE VARIABLE=petri_transverse_push_pos VALUE={settings.transverse_push_pos}
    SAVE_VARIABLE VARIABLE=petri_interlock_push_pos VALUE={settings.interlock_push_pos}
    SAVE_VARIABLE VARIABLE=petri_staging_push_pos VALUE={settings.staging_push_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_x VALUE={settings.elevator_push_pos_x}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_z VALUE={settings.elevator_push_pos_z}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={settings.dish_height}
    SAVE_VARIABLE VARIABLE=petri_max_rows VALUE={settings.max_rows}
    RESPOND MSG="Petri settings saved to persistent storage"

[gcode_macro SET_DISH_HEIGHT]
description: Set dish height for row spacing
gcode:
    {% set height = params.HEIGHT|float %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={height}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={height}
    RESPOND MSG="Dish height set to {height} mm and saved"

[gcode_macro GET_DISH_HEIGHT]
description: Display current dish height
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Dish Height: {settings.dish_height} mm"

[gcode_macro INCREASE_DISH_HEIGHT_1]
description: Increase dish height by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_height = settings.dish_height + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={new_height}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={new_height}
    RESPOND MSG="Dish height increased to {new_height} mm and saved"

[gcode_macro INCREASE_DISH_HEIGHT_01]
description: Increase dish height by 0.1 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_height = settings.dish_height + 0.1 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={new_height}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={new_height}
    RESPOND MSG="Dish height increased to {new_height} mm and saved"

[gcode_macro DECREASE_DISH_HEIGHT_01]
description: Decrease dish height by 0.1 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_height = settings.dish_height - 0.1 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={new_height}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={new_height}
    RESPOND MSG="Dish height decreased to {new_height} mm and saved"

[gcode_macro DECREASE_DISH_HEIGHT_1]
description: Decrease dish height by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_height = settings.dish_height - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=dish_height VALUE={new_height}
    SAVE_VARIABLE VARIABLE=petri_dish_height VALUE={new_height}
    RESPOND MSG="Dish height decreased to {new_height} mm and saved"

# Desired dish rows
[gcode_macro GET_DISH_ROWS]
description: Display the desired number of dish rows
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Desired Dish Rows: {settings.max_rows}"

[gcode_macro INCREASE_DISH_ROW_1]
description: Increase the desired dish row
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_row = settings.max_rows + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=max_rows VALUE={new_row}
    SAVE_VARIABLE VARIABLE=petri_max_rows VALUE={new_row}
    RESPOND MSG="Dish rows increased to {new_row} and saved"

[gcode_macro DECREASE_DISH_ROW_1]
description: Decrease the desired dish row
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_row = settings.max_rows - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=max_rows VALUE={new_row}
    SAVE_VARIABLE VARIABLE=petri_max_rows VALUE={new_row}
    RESPOND MSG="Dish rows decreased to {new_row} and saved"

# Transverse (Y axis) position adjustment macros
[gcode_macro GET_TRANSVERSE_POSITION]
description: Display current transverse push position
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Transverse Position: {settings.transverse_push_pos} mm"

[gcode_macro INCREASE_TRANSVERSE_10]
description: Increase transverse position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.transverse_push_pos + 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_transverse_push_pos VALUE={new_pos}
    RESPOND MSG="Transverse position increased to {new_pos} mm and saved"

[gcode_macro INCREASE_TRANSVERSE_1]
description: Increase transverse position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.transverse_push_pos + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_transverse_push_pos VALUE={new_pos}
    RESPOND MSG="Transverse position increased to {new_pos} mm and saved"

[gcode_macro DECREASE_TRANSVERSE_1]
description: Decrease transverse position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.transverse_push_pos - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_transverse_push_pos VALUE={new_pos}
    RESPOND MSG="Transverse position decreased to {new_pos} mm and saved"

[gcode_macro DECREASE_TRANSVERSE_10]
description: Decrease transverse position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.transverse_push_pos - 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=transverse_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_transverse_push_pos VALUE={new_pos}
    RESPOND MSG="Transverse position decreased to {new_pos} mm and saved"

# Interlock (U axis) position adjustment macros
[gcode_macro GET_INTERLOCK_POSITION]
description: Display current interlock push position
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Interlock Position: {settings.interlock_push_pos} mm"

[gcode_macro INCREASE_INTERLOCK_10]
description: Increase interlock position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.interlock_push_pos + 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_interlock_push_pos VALUE={new_pos}
    RESPOND MSG="Interlock position increased to {new_pos} mm and saved"

[gcode_macro INCREASE_INTERLOCK_1]
description: Increase interlock position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.interlock_push_pos + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_interlock_push_pos VALUE={new_pos}
    RESPOND MSG="Interlock position increased to {new_pos} mm and saved"

[gcode_macro DECREASE_INTERLOCK_1]
description: Decrease interlock position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.interlock_push_pos - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_interlock_push_pos VALUE={new_pos}
    RESPOND MSG="Interlock position decreased to {new_pos} mm and saved"

[gcode_macro DECREASE_INTERLOCK_10]
description: Decrease interlock position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.interlock_push_pos - 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=interlock_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_interlock_push_pos VALUE={new_pos}
    RESPOND MSG="Interlock position decreased to {new_pos} mm and saved"

# Staging (W axis) position adjustment macros
[gcode_macro GET_STAGING_POSITION]
description: Display current staging push position
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Staging Position: {settings.staging_push_pos} mm"

[gcode_macro INCREASE_STAGING_10]
description: Increase staging position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.staging_push_pos + 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_staging_push_pos VALUE={new_pos}
    RESPOND MSG="Staging position increased to {new_pos} mm and saved"

[gcode_macro INCREASE_STAGING_1]
description: Increase staging position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.staging_push_pos + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_staging_push_pos VALUE={new_pos}
    RESPOND MSG="Staging position increased to {new_pos} mm and saved"

[gcode_macro DECREASE_STAGING_1]
description: Decrease staging position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.staging_push_pos - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_staging_push_pos VALUE={new_pos}
    RESPOND MSG="Staging position decreased to {new_pos} mm and saved"

[gcode_macro DECREASE_STAGING_10]
description: Decrease staging position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.staging_push_pos - 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=staging_push_pos VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_staging_push_pos VALUE={new_pos}
    RESPOND MSG="Staging position decreased to {new_pos} mm and saved"

# Elevator X position adjustment macros
[gcode_macro GET_ELEVATOR_X_POSITION]
description: Display current elevator X push position
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Elevator X Position: {settings.elevator_push_pos_x} mm"

[gcode_macro INCREASE_ELEVATOR_X_10]
description: Increase elevator X position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_x + 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_x VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_x VALUE={new_pos}
    RESPOND MSG="Elevator X position increased to {new_pos} mm and saved"

[gcode_macro INCREASE_ELEVATOR_X_1]
description: Increase elevator X position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_x + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_x VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_x VALUE={new_pos}
    RESPOND MSG="Elevator X position increased to {new_pos} mm and saved"

[gcode_macro DECREASE_ELEVATOR_X_1]
description: Decrease elevator X position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_x - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_x VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_x VALUE={new_pos}
    RESPOND MSG="Elevator X position decreased to {new_pos} mm and saved"

[gcode_macro DECREASE_ELEVATOR_X_10]
description: Decrease elevator X position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_x - 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_x VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_x VALUE={new_pos}
    RESPOND MSG="Elevator X position decreased to {new_pos} mm and saved"

# Elevator Z position adjustment macros
[gcode_macro GET_ELEVATOR_Z_POSITION]
description: Display current elevator Z push position
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="Current Elevator Z Position: {settings.elevator_push_pos_z} mm"

[gcode_macro INCREASE_ELEVATOR_Z_10]
description: Increase elevator Z position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_z + 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_z VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_z VALUE={new_pos}
    RESPOND MSG="Elevator Z position increased to {new_pos} mm and saved"

[gcode_macro INCREASE_ELEVATOR_Z_1]
description: Increase elevator Z position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_z + 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_z VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_z VALUE={new_pos}
    RESPOND MSG="Elevator Z position increased to {new_pos} mm and saved"

[gcode_macro DECREASE_ELEVATOR_Z_1]
description: Decrease elevator Z position by 1.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_z - 1.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_z VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_z VALUE={new_pos}
    RESPOND MSG="Elevator Z position decreased to {new_pos} mm and saved"

[gcode_macro DECREASE_ELEVATOR_Z_10]
description: Decrease elevator Z position by 10.0 mm
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    {% set new_pos = settings.elevator_push_pos_z - 10.0 %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=elevator_push_pos_z VALUE={new_pos}
    SAVE_VARIABLE VARIABLE=petri_elevator_push_pos_z VALUE={new_pos}
    RESPOND MSG="Elevator Z position decreased to {new_pos} mm and saved"

[gcode_macro SET_MAX_ROWS]
description: Set maximum rows before interlock
gcode:
    {% set rows = params.ROWS|int %}
    SET_GCODE_VARIABLE MACRO=_PETRI_SETTINGS VARIABLE=max_rows VALUE={rows}
    SAVE_VARIABLE VARIABLE=petri_max_rows VALUE={rows}
    RESPOND MSG="Maximum rows set to {rows} and saved"

[gcode_macro SHOW_PETRI_SETTINGS]
description: Display current Petri system settings
gcode:
    {% set settings = printer["gcode_macro _PETRI_SETTINGS"] %}
    RESPOND MSG="=== CURRENT PETRI SYSTEM SETTINGS ==="
    RESPOND MSG="Transverse push position: {settings.transverse_push_pos} mm (Y axis)"
    RESPOND MSG="Interlock push position: {settings.interlock_push_pos} mm (U axis)"
    RESPOND MSG="Staging push position: {settings.staging_push_pos} mm (W axis)"
    RESPOND MSG="Elevator push position: X{settings.elevator_push_pos_x} Z{settings.elevator_push_pos_z} (XZ axes)"
    RESPOND MSG="Dish height: {settings.dish_height} mm"
    RESPOND MSG="Maximum rows: {settings.max_rows}"
    RESPOND MSG="Current row: {settings.current_row}"
    {% if settings.program_state == 0 %}
        {% set state_name = "idle" %}
    {% elif settings.program_state == 1 %}
        {% set state_name = "running" %}
    {% elif settings.program_state == 2 %}
        {% set state_name = "waiting_transverse" %}
    {% elif settings.program_state == 3 %}
        {% set state_name = "transverse_complete" %}
    {% elif settings.program_state == 4 %}
        {% set state_name = "error" %}
    {% else %}
        {% set state_name = "unknown" %}
    {% endif %}
    RESPOND MSG="Program state: {state_name} ({settings.program_state})"
    RESPOND MSG="Horizontal feedrate: {settings.horizontal_feedrate} mm/min"
    RESPOND MSG="Vertical feedrate: {settings.vertical_feedrate} mm/min"
    RESPOND MSG="Rapid feedrate: {settings.rapid_feedrate} mm/min"
    RESPOND MSG="Current feedrate override: {printer.gcode_move.speed_factor|round(2)}x"
